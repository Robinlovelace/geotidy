% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/st_dwithin.R
\name{st_dwithin}
\alias{st_dwithin}
\title{Are two geometries within a specified distance}
\usage{
st_dwithin(x, y, distance)
}
\arguments{
\item{x}{geometry of class \code{sfc}.}

\item{y}{geometry of class \code{sfc}.`}

\item{distance}{Numeric. Maximal distance threshold in map units.}
}
\value{
Returns \code{TRUE} for each \code{x} when \code{y} is within the specified distance.
\code{y} is recycled only if it is of length 1.
}
\description{
Compare two geometries to test if they are within a given distance. Both
geometries must use the same coordinate system.
}
\details{
Using \code{st_dwithin} computes the exact pairwise distance and
leverages the spatial index if available, which is preferable to using
\code{st_buffer()}, which are an approximation. Since distance are computed
pair-wise, it is generally much faster since it does not require to create
a geometry. It should also be faster than using \code{st_distance(x, y) < distance}.

\strong{Postgis} does a cartesian join on the two geometry vectors; complying
would break \code{geotidy} rule of not recycling vectors of length > 1. It is
still possible to mimic the behavior by joining the data before with
\code{dplyr::full_join}, but you have to do it explicitly.
}
\examples{
library(geotidy)
library(dplyr)
# points against line
line <- st_makeline(st_point(1:10, rnorm(10)))
plot(line)
x <- tibble::tibble(geometry = st_point(1:10, 1)) \%>\%
  mutate(within_1 = st_dwithin(geometry, line, 1))
plot(x$geometry, add = TRUE, pch = ifelse(x$within_1, 16, 1))

# points against points
x <- tibble::tibble(
  school = st_point(1:10, rnorm(10)),
  house = st_point(runif(10) * 10, 1:10)
) \%>\%
  mutate(within_3 = st_dwithin(school, house, 3))
plot(sf::st_union(x$school, x$house))
plot(x$school, add = TRUE)
plot(x$house, pch = 3, add = TRUE)
plot(x$school, add = TRUE, pch = ifelse(x$within_3, 16, 1))
}
\seealso{
sf::st_buffer(), sf::st_distance()
}
